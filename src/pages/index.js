import { useEffect, useState } from 'react'
import Head from "next/head";
import { Inter } from "next/font/google";
import styles from "@/styles/Home.module.css";
import ItemsView from '@/components/ItemsView';
import ItemsEditor from '@/components/ItemsEditor';

const inter = Inter({ subsets: ["latin"] });

function CustomerView({ customer }) {
  const [isEditing, setIsEditing] = useState(false)
  if (isEditing) return <ItemsEditor customer={customer} toggleState={setIsEditing} />
  return <ItemsView customer={customer} toggleState={setIsEditing} />
}

function CustomersList({ customers }) {
  const [draftCustomer, setDraftCustomer] = useState(null)
  if (draftCustomer === null) {
    return (
      <div>
        {customers.map(customer => (<button key={customer.id} onClick={() => setDraftCustomer(customer)}>Edit {customer.name}</button>))}
      </div>
      )
  }
  return (
    <ItemsEditor customer={draftCustomer} toggleState={() => setDraftCustomer(null)} />)
}

/**
 * Switcher to show correct view depending on status of data fetch
 * @property {Object} data
 * @property {Object} error
 * @property {Boolean} isPending
 */
function CustomerData({ data, error, isPending }) {
  if (isPending) return 'Loading'
  else if (error) return `Something went wrong: ${error.message}`
  else if (data) return ( <CustomersList customers={data} />)
  // else if (data) return (
  //   <div>{data.map(customer => <CustomerView key={customer.id} customer={customer} />)}</div>
  // )

  return null
}

export default function Home() {
  const [customers, setCustomers] = useState(null)
  const [error, setError] = useState(null)
  const [isPending, setIsPending] = useState(false)
  // TODO: retry button if error
  useEffect(() => {
    setIsPending(true)
    fetch('https://rawgit.com/wvchallenges/se-exp-challenge-invoice/master/settings.json')
      .then(response => response.json())
      .then(data => setCustomers(data.customers))
      .catch(err =>
        // console.error(err)
        setError(err)
      )
      .finally(() => setIsPending(false))
  }, [])

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main className={`${styles.main} ${inter.className}`}>
        <h1>Customer Information</h1>

        <CustomerData data={customers} error={error} isPending={isPending} />
      </main>
    </>
  );
}
